apiVersion: v1
kind: Namespace
metadata:
  name: mindbox-sre-test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: mindbox-sre-test
  labels:
    app: myapp
spec:
  # 4 реплики для пиковой нагрузки, как указано в требованиях
  replicas: 4
  selector:
    matchLabels:
      app: myapp
  # Стратегия обновления для максимальной отказоустойчивости
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%  # Гарантирует, что всегда будет 3 работающих пода
  template:
    metadata:
      labels:
        app: myapp
    spec:
      # Приоритет для распределения по зонам
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway  # Лучше чем DoNotSchedule - позволяет запуск даже при неравномерности
          labelSelector:
            matchLabels:
              app: myapp
        # Дополнительное распределение по нодам внутри зон
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: myapp
      containers:
        - name: myapp
          image: nginx:latest
          ports:
            - containerPort: 80
          # Startup Probe оптимизирована под 5-10 секунд инициализации
          startupProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 3  # Раньше начинаем проверять
            periodSeconds: 3        # Чаще проверяем
            failureThreshold: 4     # 3 + (3*4) = 15 секунд максимум
            timeoutSeconds: 2
          # Readiness Probe для проверки работоспособности
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 0  # После startup probe не нужна задержка
            periodSeconds: 5
            timeoutSeconds: 2
          # Liveness Probe для перезапуска неработающих контейнеров
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30  # Даем время на стабилизацию после запуска
            periodSeconds: 10
            timeoutSeconds: 2
          resources:
            requests:
              cpu: "100m"    # Среднее потребление
              memory: "128Mi" # Постоянное потребление памяти
            limits:
              cpu: "1000m"   # Запас для первых "тяжелых" запросов
              memory: "256Mi" # Лимит с запасом
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: mindbox-sre-test
spec:
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 80
  # Internal трафик, если нужно внешнее - добавить type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: myapp-hpa
  namespace: mindbox-sre-test
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp
  # Минимум 2 реплики для отказоустойчивости (2 зоны), максимум 4 по нагрузочному тесту
  minReplicas: 2
  maxReplicas: 4
  # Поведение масштабирования - агрессивное увеличение, осторожное уменьшение
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # 10 минут - учитываем дневной цикл
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 минута - быстро реагируем на рост
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70  # Более агрессивно чем 60% для экономии ресурсов
    # Дополнительная метрика - можно добавить кастомные метрики на основе RPS
